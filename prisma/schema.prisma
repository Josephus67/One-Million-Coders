generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Clerk manages authentication entirely

model User {
  id            String           @id // Clerk user ID
  name          String?
  email         String           @unique
  emailVerified DateTime?
  image         String?
  role          String           @default("STUDENT")
  bio           String?
  phone         String?
  website       String?
  location      String?
  linkedin      String?
  github        String?
  twitter       String?
  skills        Json?           // JSON for PostgreSQL
  interests     Json?           // JSON for PostgreSQL
  profileBanner String?
  isProfilePublic Boolean        @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  certificates  Certificate[]
  courses       Course[]
  enrollments   Enrollment[]
  notifications Notification[]
  reviews       Review[]
  preferences   UserPreferences?

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@map("categories")
}

model Course {
  id            String        @id @default(cuid())
  title         String
  description   String
  slug          String        @unique
  image         String?
  level         String
  price         Decimal       @default(0)
  duration      String?
  status        String        @default("DRAFT")
  averageRating Float         @default(0)
  totalReviews  Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  instructorId  String
  categoryId    String
  certificates  Certificate[]
  category      Category      @relation(fields: [categoryId], references: [id])
  instructor    User          @relation(fields: [instructorId], references: [id])
  enrollments   Enrollment[]
  lessons       Lesson[]
  reviews       Review[]

  @@map("courses")
}

model Lesson {
  id             String           @id @default(cuid())
  title          String
  description    String?
  content        String?
  videoUrl       String?
  duration       String?
  order          Int
  isPublished    Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courseId       String
  lessonProgress LessonProgress[]
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, order])
  @@map("lessons")
}

model Enrollment {
  id             String           @id @default(cuid())
  enrolledAt     DateTime         @default(now())
  completedAt    DateTime?
  progress       Float            @default(0)
  currentLesson  String?
  userId         String
  courseId       String
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id            String     @id @default(cuid())
  isCompleted   Boolean    @default(false)
  watchProgress Float      @default(0)
  timeSpent     Int        @default(0)
  lastWatched   DateTime   @default(now())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  enrollmentId  String
  lessonId      String
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson        Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, lessonId])
  @@map("lesson_progress")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model Certificate {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  issuedAt    DateTime @default(now())
  userId      String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("certificates")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      String           @default("INFO")
  isRead    Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  courseReminders    Boolean  @default(true)
  weeklyDigest       Boolean  @default(true)
  marketingEmails    Boolean  @default(false)
  theme              String   @default("system")
  language           String   @default("en")
  timezone           String   @default("UTC")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}
